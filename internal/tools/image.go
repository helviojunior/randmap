package tools

import (
    "image"
    "image/color"
    "image/draw"
    "image/png"
    "os"
    "syscall"
    "fmt"
    "time"

    "github.com/helviojunior/randmap/internal/version"

    "golang.org/x/image/font"
    "golang.org/x/image/font/basicfont"
    "golang.org/x/image/math/fixed"
)

func AddDefaultVersion(filename string, dstFileName string) error {
    now := time.Now().Format("2006-01-02 15:04:05 -0700")
    text := fmt.Sprintf("Generated by randmap v%s-%s - %s", version.Version, version.GitHash, now)
    return AddBottomLabel(filename, dstFileName, text)
}

func AddLabel(img *image.RGBA, label string, x, y int) {
    col := color.Black
    point := fixed.Point26_6{
        X: fixed.I(x),
        Y: fixed.I(y),
    }
    d := &font.Drawer{
        Dst:  img,
        Src:  image.NewUniform(col),
        Face: basicfont.Face7x13,
        Dot:  point,
    }
    d.DrawString(label)
}

func AddBottomLabel(fileName string, dstFileName string, label string) error {

    // Open PNG file
    fd, err := syscall.Open(fileName, syscall.O_RDONLY|syscall.O_NONBLOCK, 0)
    if err != nil {
        panic(err)
    }
    defer syscall.Close(fd)

    // Convert fd to *os.File
    file := os.NewFile(uintptr(fd), fileName)
    defer file.Close()

    srcImg, err := png.Decode(file)
    if err != nil {
        return err
    }

    // Draw text at bottom-right
    w, h := measureText(label)

    footerHeight := h * 2
    
    if footerHeight < 10 {
        footerHeight = 10
    }

    // Original dimensions
    srcBounds := srcImg.Bounds()
    width := srcBounds.Dx()
    newHeight := srcBounds.Dy() + footerHeight

    // Create new image with footer
    newImg := image.NewRGBA(image.Rect(0, 0, width, newHeight))

    // Draw original image
    draw.Draw(newImg, srcBounds, srcImg, image.Point{}, draw.Src)

    // Draw footer (white background)
    footerRect := image.Rect(0, srcBounds.Dy() - 1, width, newHeight + 1)
    draw.Draw(newImg, footerRect, &image.Uniform{color.White}, image.Point{}, draw.Src)

    AddLabel(newImg, label, width-(w+h), newHeight-(h+(h/2)))

    // Save output
    outFile, err := os.Create(dstFileName)
    if err != nil {
        return err
    }
    defer outFile.Close()

    err = png.Encode(outFile, newImg)
    if err != nil {
        return err
    }

    return nil
}

func measureText(label string) (width int, height int) {
    face := basicfont.Face7x13
    advance := 0
    for _, r := range label {
        awidth, ok := face.GlyphAdvance(r)
        if ok {
            advance += int(awidth.Round())
        }
    }
    return advance, face.Metrics().Height.Round()
}


func measureTextWithFace(face font.Face, label string) (width, height int) {
    d := &font.Drawer{
        Face: face,
    }
    advance := d.MeasureString(label)
    width = advance.Round()
    height = face.Metrics().Height.Round()
    return
}